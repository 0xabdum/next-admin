services:
  # Development service
  # dev:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.dev
  #   ports:
  #     - '${SERVER_PORT}:${SERVER_PORT}'
  #   env_file: .env.development
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     NODE_ENV: development
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  # # Production service
  # prod:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - '${SERVER_PORT}:${SERVER_PORT}'
  #   env_file: .env.development
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     NODE_ENV: production
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - app-network

  # Database service
  db:
    container_name: db
    platform: linux/amd64 #for platform error on Apple M1 chips
    restart: unless-stopped
    env_file: .env.local
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER}']
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
